name: ci

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  DOCKER_IMAGE_NAME: app
  DOCKER_REGISTRY: docker.pkg.github.com
  PACKAGE_REPO: doxavore/chasqui
  RAILS_ENV: test

jobs:
  build:
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2

      - name: Set full docker image name
        run: echo "::set-env name=FULL_DOCKER_IMAGE::$DOCKER_REGISTRY/$PACKAGE_REPO/$DOCKER_IMAGE_NAME:$GITHUB_SHA"

      - name: Build docker image
        run: |
          docker build -t "$FULL_DOCKER_IMAGE" .

      - name: Push docker image to GitHub Package Registry
        if: github.repository == env.PACKAGE_REPO
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login -u ${{ github.actor }} --password-stdin "$DOCKER_REGISTRY"
          docker push "$FULL_DOCKER_IMAGE"

      - name: Docker log out
        if: always()
        run: |
          docker logout "$DOCKER_REGISTRY"

  lint:
    needs: build
    runs-on: ubuntu-18.04

    env:
      RAILS_ENV: test

    steps:
      - name: Set full docker image name
        run: echo ::set-env name=FULL_DOCKER_IMAGE::$DOCKER_REGISTRY/$PACKAGE_REPO/$DOCKER_IMAGE_NAME:$GITHUB_SHA

      - name: Pull Docker image
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login -u ${{ github.actor }} --password-stdin "$DOCKER_REGISTRY"
          docker pull "$FULL_DOCKER_IMAGE"

      - name: Run rubocop
        run: |
          docker run --rm --env RAILS_ENV=$RAILS_ENV "$FULL_DOCKER_IMAGE" bin/rubocop

      - name: Run brakeman
        run: |
          docker run --rm --env RAILS_ENV=$RAILS_ENV "$FULL_DOCKER_IMAGE" bin/brakeman

      - name: Docker log out
        if: always()
        run: |
          docker logout "$DOCKER_REGISTRY"

  test:
    needs: build
    runs-on: ubuntu-18.04

    services:
      postgres:
        image: "postgres:11-alpine"
        ports:
          - "5432:5432"
        env:
          POSTGRES_USER: "root"
          POSTGRES_PASSWORD: "root"
        options: >-
          --health-cmd pg_isready
          --health-interval 1s
          --health-timeout 2s
          --health-retries 20
      redis:
        image: "redis:5-alpine"
        ports:
          - "6379:6379"

    env:
      POSTGRES_HOST: postgres
      RAILS_ENV: test
      RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}

    steps:
      - name: Set environment
        # This doesn't currently work; it's always empty.
        # echo ::set-env name=DOCKER_NETWORK::${{ job.services.network }}
        run: |
          echo ::set-env name=FULL_DOCKER_IMAGE::$DOCKER_REGISTRY/$PACKAGE_REPO/$DOCKER_IMAGE_NAME:$GITHUB_SHA
          echo ::set-env name=DOCKER_NETWORK::$(docker inspect -f '{{.HostConfig.NetworkMode}}' ${{ job.services.postgres.id }})
          echo ::set-env name=POSTGRES_ID::${{ job.services.postgres.id }}
          echo ::set-env name=POSTGRES_PORT::${{ job.services.postgres.ports[5432] }}
          echo ::set-env name=REDIS_URL::redis://redis:${{ job.services.redis.ports[6379] }}

      - name: Pull Docker image
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login -u ${{ github.actor }} --password-stdin "$DOCKER_REGISTRY"
          docker pull "$FULL_DOCKER_IMAGE"

      - name: Set up app
        run: |
          docker run --rm --network "$DOCKER_NETWORK" \
              -e RAILS_ENV -e POSTGRES_HOST -e POSTGRES_PORT -e REDIS_URL \
              "$FULL_DOCKER_IMAGE" \
              bin/rails db:setup

      - name: Run tests
        run: |
          docker run --rm --network "$DOCKER_NETWORK" \
              -e RAILS_ENV -e POSTGRES_HOST -e POSTGRES_PORT -e REDIS_URL \
              "$FULL_DOCKER_IMAGE" \
              bin/rspec

      - name: Docker log out
        if: always()
        run: |
          docker logout "$DOCKER_REGISTRY"
